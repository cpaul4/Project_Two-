Repository.c:
This program contains five methods: Repository_init(), Repository_insert(int key, int data), Repository_delete(int key, int data), Repository_print(int print_elements), and Repository_get(int key, int *data). It creates an element, List_head, that has a key value, a data value, and a pointer called next. It creates an unsigned integer called counter. 

void Repository_init():
This method initializes the List_head to null. It sets the counter to zero.

int Repository_insert(int key, int data):
This method is designed to insert an element into a list of elements where the keys are in numerical order. If there are no elements in the list, a new element is created with the key and data to be inserted, and this element becomes List_head. Or, if there are elements in the list but the key to be inserted is smaller than the List_head key, a new element is created and that element becomes List_head. Otherwise, a while loop is created and an element, pelement, runs through the list until it either reaches the end of the list, reaches an element with a key greater than the one to be inserted, or reaches an element with a key equal to the one to be inserted. If there is an element with a key equal to the one to be inserted, then the function returns 0 and doesn't insert anything. For the other two conditions, the while loop exits and a new element is created. This element has the key and data to be inserted passed to it. Then, it is inserted where the key numerically fits into the list. In any case where a new element is created, if the memory cannot be allocated properly a -1 is returned.

int Repository_delete(int key, int data):
This method is designed to remove an element from a list if it has the same key as the key passed in to the parameter. If there are no elements in the list, then the method returns a 0. If the first element in the list has the same key as the key to be deleted, List_head becomes the second element on the list and the first element is deleted. Otherwise, a while loop is created that runs through all the elements in the list until it reaches the last element or it reaches an element with a key greater than the key to be deleted. It checks all the elements in the list up until the point where one of these two conditions is satisfied to see if the element has a key equal to the key to be deleted. If the keys are equal, then the element is removed from the list and the element behind it is linked to the element ahead of it. If the while list exits and no element with a matching key has been found, then a 0 is returned.

int Repository_get(int key, int *data): 
This method is designed to find an element with a matching key, return a 0 if the element has not been found, or return a 1 if the element has been found. If there are elements in the list, then a 0 is returned. If there are elements in the list, a while loop runs through the elements and checks to see if they have a key equal to the key passed in to the parameter. The while loop continues until it reaches the end of the list or until it reaches an element with a higher key than the key in the parameter. If an element with a matching key is found, a 1 is returned. If an element without a matching key is found, a 0 is returned. 

void Repository_print(int print_elements):
This method prints out the size of the repository, the value of the counter, and the individual elements in the repository. It initializes a parameter called size. If List_head is null, it prints out that there are no elements in the repository. If List_head is not null, then it runs through the elements in the list using a while loop, adding a 1 to the size each time the element pelement is moved to a new element, essentially counting the number of elements. At the end, it prints out the size. It also prints out the value of the counter. If print_elements is not zero, then it prints out the individual elements in the list using the while loop.
